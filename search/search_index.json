{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workload Identity Federation","text":"<p>Authenticating to public cloud APIs has historically been done using long-lived credentials:</p> <ul> <li>AWS IAM User Access Keys</li> <li>Azure Service Principal Client Id / Secrets</li> <li>Google Cloud Service Account JSON Web Tokens (JWT)</li> </ul> <p>Unfortunately, managing long-lived credentials is a massive headache for development, operations, and security teams to manage. Credentials are often stored in plaintext, and are frequently leaked in source code repositories, chat logs, and other insecure locations. Workload Identity Federation is a cloud-native capability that enables authentication to public cloud APIs using an OpenID Connect Identity Provider's JSON Web Token (JWT).</p>"},{"location":"#hands-on-workshop","title":"Hands On Workshop","text":"<p>Nymeria's goal is to help cloud identity and security teams to eliminate long-lived credentials from their cloud estate. The hands on workshop walks you through the following scenario:</p> <ol> <li> <p>A GitHub Action needs to authenticate to an Entra ID Tenant to run a Terraform deployment.</p> </li> <li> <p>The Terraform deployment creates an Azure virtual machine that requires data stored in both AWS S3 and Google Cloud Storage (GCS).</p> </li> </ol> <p></p> <p>There are two ways to complete this architecture. The first pattern relies on long-lived credentials, and the second pattern relies on Workload Identity Federation.</p>"},{"location":"#long-lived-credentials","title":"Long Lived Credentials","text":"<ol> <li> <p>The GitHub Action uses an Azure Service Principal Client Id and Client Secret for authenticating to the Entra ID Tenant.</p> </li> <li> <p>The Azure Virtual machine uses AWS IAM User Access Keys for authenticating to the AWS S3 API.</p> </li> <li> <p>The Azure Virtual machine uses a Google Cloud Service Account Key for authenticating to the GCS API.</p> </li> </ol>"},{"location":"#workload-identity-federation_1","title":"Workload Identity Federation","text":"<ol> <li> <p>The GitHub Action uses a built-in OpenID Connect (OIDC) JWT token for authenticating to the Entra ID Tenant.</p> </li> <li> <p>The Azure virtual machine obtains a signed OpenID Connect JWT from the instance metadata service (IMDS). Then, uses the identity token to authenticate to an AWS Identity Provider and access the S3 API.</p> </li> <li> <p>The Azure virtual machine obtains a signed OpenID Connect JWT from the instance metadata service (IMDS). Then, uses the identity token to impersonate a Google Cloud service account and access the GCS API.</p> </li> </ol>"},{"location":"#other-examples","title":"Other Examples","text":"<p>The Nymeria Other Examples directory contains additional examples of using Workload Identity Federation to authenticate to public cloud APIs using an OpenID Connect Identity Provider's JSON Web Token (JWT).</p>"},{"location":"aws/","title":"AWS Identity Federation","text":"<p>During the Getting Started section, you deployed the 02_aws_init Terraform configuration to your AWS account. The AWS configuration includes an AWS Identity Provider resource that trusts your Azure Entra ID tenant and an IAM role with permissions to read data from the Nymeria S3 bucket. In this section, we will explore how the AWS Identity Provider configuration trusts the Nymeria virtual machine and confirm the virtual machine can assume the IAM role.</p>"},{"location":"aws/#nymeria-virtual-machine-identity-token","title":"Nymeria Virtual Machine Identity Token","text":"<p>Connect to the Nymeria virtual machine and request an OpenID Connect identity token from Instance Metadata Service (IMDS) with the audience set to <code>api://nymeria-workshop</code>. Then, decode the JWT to view the subject, issuer, and audience claims.</p> <ol> <li> <p>Browse to the Azure Portal open Cloud Shell again.</p> <p></p> </li> <li> <p>Run the following command to connect to the Nymeria virtual machine over SSH.</p> <pre><code>cd ~/clouddrive/nymeria/src/virtual_machines/04_gh_action/\nNYMERIA_FQDN=$(terraform output --json | jq -r '.azure_virtual_machine_fqdn.value')\nssh -i ~/.ssh/nymeria.pem ubuntu@$NYMERIA_FQDN\n</code></pre> <p>Terminal Output</p> <p>If you have successfully connected to the Nymeria virtual machine. The prompt should look like the following:</p> <pre><code>Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 6.2.0-1012-azure x86_64)\n...\nubuntu@nymeria:~$\n</code></pre> </li> <li> <p>Run the following command in the Nymeria virtual machine to request an OpenID Connect JSON Web Token (JWT) with the audience set to <code>api://nymeria-workshop</code>. The return value will be stored in the <code>AZURE_JWT</code> environment variable.</p> <pre><code>AZURE_JWT=$(curl -s \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=api://nymeria-workshop\" -H \"Metadata: true\" | jq -r '.access_token')\n</code></pre> </li> <li> <p>Run the following command to decode the JWT.</p> <pre><code>jq -R 'split(\".\") | .[1] | @base64d | fromjson' &lt;&lt;&lt; \"$AZURE_JWT\"\n</code></pre> <p>Terminal Output</p> <pre><code>{\n  \"aud\": \"api://nymeria-workshop\",\n  \"iss\": \"https://sts.windows.net/[YOUR_AZURE_TENANT_ID]/\",\n  \"iat\": 1695248707,\n  \"nbf\": 1695248707,\n  \"exp\": 1695335407,\n  \"aio\": \"E2FgYBGc6rGGA2rdd8+4T5srd345DDD=\",\n  \"appid\": \"e925f5a3-240b-464c-b44b-f2ba753231be\",\n  \"appidacr\": \"2\",\n  \"idp\": \"https://sts.windows.net/[YOUR_AZURE_TENANT_ID]/\",\n  \"oid\": \"1a3b54b3-2812-4c44-bb40-9e4fe51760a3\",\n  \"rh\": \"0.AVgAaMf7MCTi0EaQ92P3QneTKEpwXyZXB19Jo9CxYRO9mM9YAAA.\",\n  \"sub\": \"[YOUR_NYMERIA_VM_SUBJECT_ID]\",\n  \"tid\": \"[YOUR_AZURE_TENANT_ID]\",\n  \"uti\": \"gN-9UtHAXUCaxbGiix6uAQ\",\n  \"ver\": \"1.0\"\n}\n</code></pre> </li> <li> <p>The Nymeria virtual machine's claims in the decoded JWT are as follows:</p> <ul> <li> <p>The identity token's <code>iss</code> claim is set to <code>https://sts.windows.net/[YOUR_AZURE_TENANT_ID]/</code>.</p> </li> <li> <p>The identity token's <code>aud</code> claim is set to <code>api://nymeria-workshop</code>.</p> </li> <li> <p>The identity token's <code>sub</code> uniquely identifies the Nymeria virtual machine. The unique identifier is the Azure virtual machine's managed identity object id in the Entra ID tenant.</p> </li> </ul> </li> </ol>"},{"location":"aws/#aws-identity-provider","title":"AWS Identity Provider","text":"<p>Inspect the AWS Identity Provider and IAM Role configuration. Confirm the OpenID Connect token's subject, issuer, and audience claims match the values found in the Nymeria Virtual Machine Identity Token.</p> <ol> <li> <p>Sign into the AWS Web Console again.</p> </li> <li> <p>Set the region (top right-hand corner) to <code>us-east-2 (Ohio)</code>.</p> </li> <li> <p>Navigate to the IAM service.</p> </li> <li> <p>Select the Identity providers menu item from the left-hand menu.</p> <p></p> </li> <li> <p>Select the sts.windows.net/[YOUR_AZURE_TENANT_ID] identity provider to view the details.</p> </li> <li> <p>Confirm the following configuration matches the Nymeria virtual machine's identity token. The configuration grants any identity token issued by the Azure Entra ID tenant access to the AWS account's identity provider resource.</p> <ul> <li> <p>The Provider matches the Nymeria virtual machine's identity token's <code>iss</code> claim: <code>https://sts.windows.net/[YOUR_AZURE_TENANT_ID]/</code>.</p> </li> <li> <p>The Audience matches the Nymeria virtual machine's identity token's <code>aud</code> claim: <code>api://nymeria-workshop</code>.</p> </li> </ul> <p></p> </li> <li> <p>The AWS identity provider resource does not inherently grant access to IAM permissions. Permissions are granted using an IAM Role's trust policy. To view the Nymeria IAM Role's trust policy, select the Roles menu item from the left-hand menu. Search for the <code>nymeria-azure-vm-role</code> role and open the details.</p> <p></p> </li> <li> <p>On the <code>nymeria-azure-vm-role</code> role's details page, select the Trust relationships tab.</p> <p></p> </li> <li> <p>Inspect the <code>nymeria-azure-vm-role</code> role's trust policy granting the assume role permission to the Nymeria virtual machine's managed identity.</p> <p>IAM Role Trust Policy </p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Federated\": \"arn:aws:iam::123456789012:oidc-provider/sts.windows.net/[YOUR_AZURE_TENANT_ID]}/\"\n      },\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Condition\": {\n        \"StringEquals\": {\n            \"sts.windows.net/[YOUR_AZURE_TENANT_ID]/:aud\": \"api://nymeria-workload-identity\",\n            \"sts.windows.net/[YOUR_AZURE_TENANT_ID]/:sub\": \"[YOUR_NYMERIA_VM_SUBJECT_ID]\"\n        }\n      }\n    }\n  ]\n}\n</code></pre> <ul> <li> <p>The Principal element trusts tokens issued by the Entra ID tenant.</p> </li> <li> <p>The <code>aud</code> condition validates the token's audience claim is equal to <code>api://nymeria-workload-identity</code>.</p> </li> <li> <p>The <code>sub</code> condition validates the token's subject claim is equal to the Nymeria virtual machine's managed identity object id.</p> </li> </ul> </li> </ol> <p>Privilege Escalation Path</p> <p>Misconfigured identity federation IAM trust policies can allow privilege escalation vulnerabilities. Researchers have identified several instances with misconfigured GitHub action trust policies. The root cause is forgetting to apply the <code>sub</code> condition restricting access to a specific principal.</p>"},{"location":"aws/#aws-workload-identity-federation","title":"AWS Workload Identity Federation","text":"<p>Use the Nymeria virtual machine's OpenID Connect token to assume the AWS IAM role. Then, use the temporary credentials to access data in AWS S3.</p> <ol> <li> <p>Browse to the Azure Portal open Cloud Shell again.</p> <p></p> </li> <li> <p>Run the following command to connect to the Nymeria virtual machine over SSH.</p> <pre><code>cd ~/clouddrive/nymeria/src/virtual_machines/04_gh_action/\nNYMERIA_FQDN=$(terraform output --json | jq -r '.azure_virtual_machine_fqdn.value')\nssh -i ~/.ssh/nymeria.pem ubuntu@$NYMERIA_FQDN\n</code></pre> <p>Terminal Output</p> <p>If you have successfully connected to the Nymeria virtual machine. The prompt should look like the following:</p> <pre><code>Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 6.2.0-1012-azure x86_64)\n...\nubuntu@nymeria:~$\n</code></pre> </li> <li> <p>Run the following command in the Nymeria virtual machine to request an OpenID Connect JSON Web Token (JWT) with the audience set to <code>api://nymeria-workshop</code>. The return value will be stored in the <code>AZURE_JWT</code> environment variable.</p> <pre><code>AZURE_JWT=$(curl -s \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=api://nymeria-workshop\" -H \"Metadata: true\" | jq -r '.access_token')\n</code></pre> </li> <li> <p>Source the environment variables in the <code>~/.aws/get-resources.sh</code> script and verify the role ARN is populated in the <code>AWS_CROSS_CLOUD_ROLE_ARN</code> environment variable.</p> <pre><code>source ~/.aws/get-resources.sh \necho $AWS_CROSS_CLOUD_ROLE_ARN\n</code></pre> <p>Terminal Output</p> <pre><code>arn:aws:iam::123456789012:role/nymeria-azure-vm-role\n</code></pre> </li> <li> <p>Run the following command to assume the <code>nymeria-azure-vm-role</code> AWS IAM role using the Nymeria virtual machine's OpenID Connect token.</p> <pre><code>export $(aws sts assume-role-with-web-identity --role-arn \"$AWS_CROSS_CLOUD_ROLE_ARN\" --role-session-name \"nymeria-demo\" --web-identity-token \"$AZURE_JWT\" --duration-seconds 3600 --output text --query \"[['AWS_ACCESS_KEY_ID',Credentials.AccessKeyId],['AWS_SECRET_ACCESS_KEY',Credentials.SecretAccessKey],['AWS_SESSION_TOKEN',Credentials.SessionToken]][*].join(\\`=\\`,@)\")\n</code></pre> </li> <li> <p>Verify the AWS IAM role was successfully assumed by running the following command.</p> <pre><code>aws sts get-caller-identity\n</code></pre> <p>Terminal Output</p> <pre><code>{\n  \"UserId\": \"AROAEXAMPLE:nymeria-demo\",\n  \"Account\": \"123456789012\",\n  \"Arn\": \"arn:aws:sts::123456789012:assumed-role/nymeria-azure-vm-role/nymeria-demo\"\n}\n</code></pre> </li> <li> <p>Run the <code>aws s3 cp</code> command to download the Nymeria image from the S3 bucket using the stolen long-lived credentials.</p> <pre><code>aws s3 cp s3://$AWS_S3_BUCKET_ID/aws-workload-identity.png ~/aws-workload-identity.png\nls -la ~/aws-workload-identity.png\n</code></pre> <p>Terminal Output</p> <pre><code>download: s3://nymeria-cross-cloud-iulqhgnx/aws-workload-identity.png to ./aws-workload-identity.png\n-rw-rw-r-- 1 ubuntu ubuntu 156686 Sep 19 00:25 /home/ubuntu/aws-workload-identity.png\n</code></pre> </li> </ol>"},{"location":"aws/#next-steps","title":"Next Steps","text":"<p>AWS Workload Identity</p> <p>With this configuration, we have successfully killed the AWS long-lived access keys. The Nymeria virtual machine is now using its native identity token (JWT) to assume the AWS IAM Role and access the AWS S3 API.</p> <p>Next, move on to the Google Workload Identity Federation section to learn how to authenticate the Nymeria virtual machine using AWS Identity Federation.</p>"},{"location":"azure/","title":"Azure Identity Federation","text":"<p>During the Getting Started section, you deployed the Federated Identity GitHub Action. Without realizing it, you used Azure's workload identity federation capability to deploy the Nymeria virtual machine to your Azure subscription. In this section, we will explore how the GitHub Action uses Azure's workload identity federation capability to authenticate to the Azure API.</p>"},{"location":"azure/#github-action-federation","title":"GitHub Action Federation","text":"<p>Inspect the GitHub Federated Identity workflow and identify the OIDC token's subject, issuer, and audience claims.</p> <ol> <li> <p>In your GitHub repository, navigate to the Actions tab and click on the Federated Identity workflow. Then, select the completed Federated Identity run to view the completed jobs.</p> <p></p> </li> <li> <p>Select the Apply Terraform job to view the steps.</p> <p></p> </li> <li> <p>Expand the Azure Login step to view the log output from the the <code>azure/login</code> action. Observe the following log output from the <code>azure/login</code> action showing the federated token details.</p> <ul> <li> <p>The identity token's issuer is set to <code>https://token.actions.githubusercontent.com</code>.</p> </li> <li> <p>The identity token's subject uniquely identifies your <code>nymeria</code> repository and <code>main</code> branch running the Federated Identity workflow.</p> </li> </ul> <p>Console Output</p> <pre><code>Using OIDC authentication...\nFederated token details:\nissuer - https://token.actions.githubusercontent.com\nsubject claim - repo:[YOUR_GITHUB_USERNAME]/nymeria:ref:refs/heads/main\n</code></pre> </li> <li> <p>Expand the  <code>azure/login</code> action <code>run</code> details to view the action's inputs variables. The <code>azure/login</code> action uses the <code>client-id</code>, <code>tenant-id</code>, and <code>subscription-id</code> parameters to authenticate to the Azure API. The <code>audience</code> parameter is used when requesting an OpenID Connect (OIDC) identity token from the GitHub Actions OpenID Connect Identity Provider. The <code>audience</code> parameter uses the default value <code>api://AzureADTokenExchange</code> from the <code>azure/login</code> action, but is configurable if a different audience is desired.</p> <p>Console Output</p> <pre><code>Run azure/login@v1.4.6\nwith:\n  client-id: ***\n  tenant-id: ***\n  subscription-id: ***\n  enable-AzPSSession: false\n  environment: azurecloud\n  allow-no-subscriptions: false\n  audience: api://AzureADTokenExchange\n</code></pre> </li> </ol>"},{"location":"azure/#azure-service-principal-configuration","title":"Azure Service Principal Configuration","text":"<p>Confirm the Azure service principal's federated identity configuration matches the GitHub Federated Identity workflow's OIDC token claims.</p> <ol> <li> <p>In the Azure portal, navigate to the Microsoft Entra ID service. Select the App registrations menu item to view the list of applications. Then, select the All applications option to view all registered applications, search for the <code>github-federation-ad-app</code> application, and open the details.</p> <p></p> </li> <li> <p>Select the Certificates &amp; secrets menu item to view the list of certificates and secrets. Observe that there are no Client Secrets associated with the service principal. However, there is one Federated credential. Open the <code>github-federation</code> credential to view the details.</p> <p></p> </li> <li> <p>This federated credential resource establishes trust between the GitHub Actions OIDC provider and the service principal. Confirm the configuration matches the GitHub Actions OIDC provider's issuer claim.</p> <ul> <li> <p>The Issuer matches the GitHub Action OIDC token's issuer claim: <code>https://token.actions.githubusercontent.com</code>.</p> </li> <li> <p>The Subject identifier matches the GitHub Action OIDC token's <code>sub</code> claim: <code>repo:[YOUR_GITHUB_USERNAME]/nymeria:ref:refs/heads/main</code>.</p> </li> <li> <p>The Audience matches the GitHub Action OIDC token's <code>aud</code> claim: <code>api://AzureADTokenExchange</code>.</p> </li> </ul> <p></p> </li> </ol>"},{"location":"azure/#next-steps","title":"Next Steps","text":"<p>Azure Workload Identity</p> <p>With this configuration, we have successfully killed the Azure service principal's long-lived credential. The <code>azure/login</code> action uses the GitHub Actions OIDC token to authenticate to the Azure tenant instead of the service principal's client secret.</p> <p>Next, move on to the AWS Identity Federation section to learn how to authenticate the Nymeria virtual machine using AWS Identity Federation.</p>"},{"location":"gcp/","title":"Google Cloud Workload Identity Federation","text":"<p>During the Getting Started section, you deployed the 03_gcp_init Terraform configuration to your Google Cloud project. The Google configuration includes an Workload Identity Provider resource that trusts your Azure Entra ID tenant and a service account with permissions to read data from the Nymeria GCS bucket. In this section, we will explore how the Workload Identity Provider configuration trusts the Nymeria virtual machine and confirm the virtual machine can impersonate the Google Cloud service account.</p>"},{"location":"gcp/#google-cloud-workload-identity-provider","title":"Google Cloud Workload Identity Provider","text":"<p>Inspect the Google Cloud Workload Identity Provider and Service Account configuration. Confirm the OpenID Connect token's subject, issuer, and audience claims match the values found in the Nymeria Virtual Machine Identity Token.</p> <ol> <li> <p>Sign into the Google Cloud Web Console again.</p> </li> <li> <p>Navigate to the IAM service.</p> </li> <li> <p>Select the Workload Identity Federation menu item from the left-hand menu. Then, open the Azure Cross Cloud IdP identity pool to view the details.</p> <p></p> </li> <li> <p>In the right window, Select the Azure VM identity provider to view the details.</p> <p></p> </li> <li> <p>Confirm the following configuration matches the Nymeria virtual machine's identity token. The configuration grants any identity token issued by the Azure Entra ID tenant to authenticate to the workload identity pool.</p> <ul> <li> <p>The Issuer (URL) matches the Nymeria virtual machine's identity token's <code>iss</code> claim: <code>https://sts.windows.net/[YOUR_AZURE_TENANT_ID]/</code>.</p> </li> <li> <p>The Allowed Audiences includes one entry matching the Nymeria virtual machine's identity token's <code>aud</code> claim: <code>api://nymeria-workshop</code>.</p> </li> </ul> <p></p> </li> <li> <p>The Workload Identity Pool and Provider resources do not inherently grant access to impersonate a service account. Permissions are granted by connecting a service account to the identity pool. Press the back button to navigate back to the workload identity pool. Then, select the Connected Service Accounts tab in the right window. Expand the nymeria-cross-cloud-sa service account to view the identity pool principals with access to impersonate the service account.</p> <p></p> </li> <li> <p>Confirm the <code>google.subject</code> filter restricts nymeria-cross-cloud-sa service account impersonation to the Nymeria virtual machine's managed identity.</p> </li> </ol> <p>Privilege Escalation Path</p> <p>Misconfigured service account impersonation filters can allow privilege escalation vulnerabilities. Failing to apply a filter for a <code>principal</code> or <code>principalSet</code> can grant the entire workload identity pool service account impersonation.</p>"},{"location":"gcp/#google-cloud-workload-identity","title":"Google Cloud Workload Identity","text":"<p>Use the Nymeria virtual machine's OpenID Connect token to impersonate the Google Cloud service account. Then, use the temporary credentials to access data in Google Cloud Storage (GCS).</p> <ol> <li> <p>Browse to the Azure Portal open Cloud Shell again.</p> <p></p> </li> <li> <p>Run the following command to connect to the Nymeria virtual machine over SSH.</p> <pre><code>cd ~/clouddrive/nymeria/src/virtual_machines/04_gh_action/\nNYMERIA_FQDN=$(terraform output --json | jq -r '.azure_virtual_machine_fqdn.value')\nssh -i ~/.ssh/nymeria.pem ubuntu@$NYMERIA_FQDN\n</code></pre> <p>Terminal Output</p> <p>If you have successfully connected to the Nymeria virtual machine. The prompt should look like the following:</p> <pre><code>Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 6.2.0-1012-azure x86_64)\n...\nubuntu@nymeria:~$\n</code></pre> </li> <li> <p>Source the environment variables in the <code>~/.config/gcloud/get-resources.sh</code> script and verify the project and bucket names are populated in the <code>GCS_BUCKET_ID</code> and <code>GCP_PROJECT_ID</code> environment variables.</p> <pre><code>source ~/.config/gcloud/get-resources.sh\necho $GCS_BUCKET_ID\necho $GCP_PROJECT_ID\n</code></pre> <p>Terminal Output</p> <pre><code>nymeria-cross-cloud-abc123\n[YOUR_GOOGLE_PROJECT_ID]\n</code></pre> </li> <li> <p>Inspect the Google Cloud Workload Identity Federation client configuration file. Observe the following configuration values:</p> <ul> <li> <p>The <code>token_url</code> instructs the <code>gcloud</code> command line interface to obtain an authentication token from the Google Cloud STS API.</p> </li> <li> <p>The <code>audience</code> attribute instructs the <code>gcloud</code> command line interface to authenticate to the Nymeria workload identity pool's <code>azure-vm</code> provider.</p> </li> <li> <p>The <code>credential_source</code> attribute instructs the <code>gcloud</code> command line interface to obtain an OpenID Connect token from the Nymeria virtual machine's metadata service with the audience set to <code>api://nymeria-workshop</code>.</p> </li> <li> <p>The <code>service_account_impersonation_url</code> attribute instructs the <code>gcloud</code> command line interface to use the workload identity pool's authentication token to impersonate the <code>nymeria-cross-cloud-sa</code> service account.</p> </li> </ul> <pre><code>cat ~/.config/gcloud/cross-cloud-client-config.json\n</code></pre> <p>Terminal Output</p> <pre><code>{\n    \"type\": \"external_account\",\n    \"audience\": \"//iam.googleapis.com/projects/123456789012/locations/global/workloadIdentityPools/nymeria-identity-pool-e9zwi7h7/providers/azure-vm-e9zwi7h7\",\n    \"subject_token_type\": \"urn:ietf:params:oauth:token-type:jwt\",\n    \"token_url\": \"https://sts.googleapis.com/v1/token\",\n    \"service_account_impersonation_url\": \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/nymeria-cross-cloud-sa@[YOUR_GOOGLE_PROJECT_ID].iam.gserviceaccount.com:generateAccessToken\",\n    \"credential_source\": {\n        \"url\": \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=api://nymeria-workshop\",\n        \"headers\": {\n          \"Metadata\": \"True\"\n        },\n        \"format\": {\n          \"type\": \"json\",\n          \"subject_token_field_name\": \"access_token\"\n        }\n    }\n}\n</code></pre> </li> <li> <p>Run the following command to authenticate to the Google Cloud Workload Identity Pool using the client configuration file. Enter <code>Y</code> to overwrite the existing credential configuration.</p> <pre><code>gcloud auth login --cred-file=/home/ubuntu/.config/gcloud/cross-cloud-client-config.json\n</code></pre> <p>Terminal Output</p> <pre><code>You are already authenticated with 'nymeria-cross-cloud-sa@[YOUR_GOOGLE_PROJECT_ID].iam.gserviceaccount.com'. Do you wish to proceed and overwrite existing credentials?\n\nDo you want to continue (Y/n)? Y\n\nAuthenticated with external account credentials for: [nymeria-cross-cloud-sa@[YOUR_GOOGLE_PROJECT_ID].iam.gserviceaccount.com].\n</code></pre> </li> <li> <p>Run the following command to configure the <code>gcloud</code> command line interface to use your Google Cloud project. Enter <code>Y</code> to overwrite the existing project configuration.</p> <pre><code>gcloud config set project $GCP_PROJECT_ID\n</code></pre> <p>Terminal Output</p> <pre><code>WARNING: You do not appear to have access to project [YOUR_GOOGLE_PROJECT_ID] or it does not exist. Are you sure you wish to set property [core/project] to [YOUR_GOOGLE_PROJECT_ID]?\n\nDo you want to continue (Y/n)?  Y\n\nUpdated property [core/project].\n</code></pre> </li> <li> <p>Run the following <code>gsutil</code> command to access the GCS API. This command will automatically use the <code>cross-cloud-client-config.json</code> to authenticate to the workload identity pool, impersonate the <code>nymeria-cross-cloud-sa</code> service account, and download the object from the bucket.</p> <pre><code>gsutil cp gs://$GCS_BUCKET_ID/gcp-workload-identity.png ~/gcp-workload-identity.png\nls -la ~/gcp-workload-identity.png\n</code></pre> <p>Terminal Output</p> <pre><code>Copying gs://nymeria-cross-cloud-e9zwi7h7/gcp-workload-identity.png...\n/ [1 files][155.7 KiB/155.7 KiB]\nOperation completed over 1 objects/155.7 KiB.\n\n-rw-rw-r-- 1 ubuntu ubuntu 159450 Sep 21 17:43 /home/ubuntu/gcp-workload-identity.png\n</code></pre> </li> </ol>"},{"location":"gcp/#next-steps","title":"Next Steps","text":"<p>Google Cloud Workload Identity</p> <p>With this configuration, we have successfully killed the Google cloud long-lived service account key. The Nymeria virtual machine is now using its native identity token (JWT) to impersonate the Google Cloud service account and access to the GCS API.</p> <p>Congratulations, you have completed the Nymeria workshop. Next, move on to the Teardown section to destroy the resources you created during the workshop.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have completed the Prerequisites before starting the workshop.</p> <ul> <li> GitHub Account</li> <li> Azure Subscription</li> <li> AWS Account</li> <li> Google Cloud Project</li> </ul>"},{"location":"getting_started/#github-repository-configuration","title":"GitHub Repository Configuration","text":"<p>Start by forking Puma Security's Nymeria Workload Identity Repository into your personal GitHub account.</p> <ol> <li> <p>Sign in to your GitHub account.</p> </li> <li> <p>Browse to the Puma Security Nymeria Workload Identity Repository.</p> </li> <li> <p>In the top right-hand corner, press the Fork button to fork the repository to your personal GitHub account.</p> <p></p> </li> <li> <p>Press the Create fork button to fork the repository into your personal GitHub account.</p> </li> <li> <p>In your forked repository, press the Code button and select HTTPS to view your clone URL. Press the copy button to put the clone URL onto your clipboard. Keep this value handy as you will need it later to bootstrap each cloud environment.</p> <p></p> </li> </ol>"},{"location":"getting_started/#azure-subscription","title":"Azure Subscription","text":""},{"location":"getting_started/#azure-bootstrap","title":"Azure Bootstrap","text":"<p>Complete the following steps to create the resources required to authenticate the Nymeria GitHub Action to your Azure subscription.</p> <ol> <li> <p>Sign into the Azure Portal and press the Cloud Shell icon next to the search box.</p> <p></p> </li> <li> <p>Run the following commands in the Terminal to clone your <code>nymeria</code> repository into the Azure cloud drive.</p> <pre><code>cd ~/clouddrive\ngit clone [ENTER_YOUR_CLONE_URL]\n</code></pre> </li> <li> <p>Change the directory to the <code>~/clouddrive/nymeria/src/01_azure_init</code> directory.</p> <pre><code>cd ~/clouddrive/nymeria/src/virtual_machines/01_azure_init/\n</code></pre> </li> <li> <p>Apply the Terraform configuration to bootstrap your Azure subscription with both long-lived credentials and the workload identity resources.</p> <pre><code>export TF_VAR_github_repository=nymeria\nexport TF_VAR_github_organization=[ENTER_YOUR_GITHUB_USERNAME]\nterraform init\nterraform plan\nterraform apply -auto-approve\n</code></pre> </li> <li> <p>Terraform should confirm the successful creation of the workload identity resources.</p> <p>Terminal Output</p> <pre><code>Apply complete! Resources: 13 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nazure_subscription_id = &lt;sensitive&gt;\nazure_tenant_id = &lt;sensitive&gt;\nazure_virtual_machine_user_identity_id = \"__redacted__\"\ngithub_service_principal_client_id = &lt;sensitive&gt;\ngithub_service_principal_client_secret = &lt;sensitive&gt;\nresource_group_name = \"nymeria-federated-identity\"\nterraform_state_storage_account_name = \"terraformmlgxt9hl\"\n</code></pre> </li> </ol>"},{"location":"getting_started/#azure-github-secret","title":"Azure GitHub Secret","text":"<p>Configure the required GitHub Action secret for the Nymeria repository to deploy resources to your Azure subscription.</p> <ol> <li> <p>Run the following command to display the Terraform output values.</p> </li> <li> <p>Note the values of the <code>azure_tenant_id</code> and <code>azure_virtual_machine_user_identity_principal_id</code> outputs. These will be needed to bootstrap both your AWS and Google Cloud accounts.</p> </li> <li> <p>Copy the entire output value onto the clipboard for use in the next step.</p> <pre><code>terraform output --json\n</code></pre> <p>Terminal Output</p> <pre><code>{\n  \"azure_subscription_id\": {\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  },\n  \"azure_tenant_id\": {\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  },\n  \"azure_virtual_machine_user_identity_id\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  },\n  \"github_service_principal_client_id\": {\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  },\n  \"github_service_principal_client_secret\": {\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  },\n  \"resource_group_name\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"nymeria-federated-identity\"\n  },\n  \"terraform_state_storage_account_name\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"terraformznoypqbp\"\n  }\n}\n</code></pre> </li> <li> <p>Browse to your GitHub repository's Settings.</p> <p></p> </li> <li> <p>In the left navigation, press the Secrets and variables &gt; Actions menu item.</p> <p></p> </li> <li> <p>Press the New repository secret button.</p> </li> <li> <p>Enter the following values for the new secret:</p> <ul> <li> <p>Name: <code>AZURE_BOOTSTRAP</code></p> </li> <li> <p>Secret: [Paste the JSON Terraform output]</p> </li> </ul> </li> <li> <p>Press the Add Secret button.</p> </li> </ol>"},{"location":"getting_started/#aws-account","title":"AWS Account","text":""},{"location":"getting_started/#aws-bootstrap","title":"AWS Bootstrap","text":"<p>Complete the following steps to create the resources required for the Azure virtual machine to authenticate your AWS account.</p> <ol> <li> <p>Sign into the AWS Web Console.</p> </li> <li> <p>Set the region (top right-hand corner) to <code>us-east-2 (Ohio)</code>.</p> <p></p> <p>Why Ohio?</p> <p>The Terraform deployment uses the <code>us-east-2</code> region by default. This can be overridden by setting the <code>TF_VAR_region</code> environment variable to a different region.</p> </li> <li> <p>Press the Cloud Shell icon next to the search box.</p> <p></p> </li> <li> <p>Unlike Azure and Google Cloud, the AWS CloudShell does not come with Terraform preinstalled. You will need to install Terraform before you can initialize your AWS account.</p> <pre><code>git clone https://github.com/tfutils/tfenv.git ~/.tfenv\nmkdir ~/bin\nln -s ~/.tfenv/bin/* ~/bin/\ntfenv install 1.5.7\ntfenv use 1.5.7\nterraform --version\n</code></pre> </li> <li> <p>Run the following commands to clone your <code>nymeria</code> repository into the AWS cloud drive.</p> <pre><code>git clone [ENTER_YOUR_CLONE_URL]\n</code></pre> </li> <li> <p>Change the directory to the <code>~/nymeria/src/virtual_machines/02_aws_init/</code> directory.</p> <pre><code>cd ~/nymeria/src/virtual_machines/02_aws_init/\n</code></pre> </li> <li> <p>Apply the Terraform configuration to bootstrap your AWS account with both long-lived credentials and the workload identity resources.</p> <pre><code>export TF_VAR_azure_tenant_id=[ENTER_YOUR_AZURE_TENANT_ID]\nexport TF_VAR_azure_virtual_machine_managed_identity_principal_id=[AZURE_VIRTUAL_MACHINE_USER_IDENTITY_PRINCIPAL_ID]\nterraform init\nterraform plan\nterraform apply -auto-approve\n</code></pre> </li> <li> <p>Terraform should confirm the successful creation of the workload identity resources.</p> <p>Terminal Output</p> <pre><code>Apply complete! Resources: 10 added, 0 changed, 0 destroyed.\n\nOutputs:\n\naws_default_region = \"us-east-2\"\naws_s3_bucket = \"nymeria-cross-cloud-ipdrhsne\"\nazure_vm_aws_access_key_id = &lt;sensitive&gt;\nazure_vm_aws_role_arn = \"arn:aws:iam::123456789012:role/nymeria-azure-vm-role\"\nazure_vm_aws_secret_access_key = &lt;sensitive&gt;\n</code></pre> </li> </ol>"},{"location":"getting_started/#aws-github-secret","title":"AWS GitHub Secret","text":"<ol> <li> <p>From the AWS CloudShell terminal, run the following command to display the Terraform output.</p> <pre><code>terraform output --json\n</code></pre> </li> <li> <p>Copy the entire output value onto the clipboard for use in the next step.</p> <p>Terminal Output</p> <pre><code>{\n  \"aws_s3_bucket\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"nymeria-cross-cloud-yh831o00\"\n  },\n  \"azure_vm_aws_access_key_id\": {\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  },\n  \"azure_vm_aws_role_arn\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"arn:aws:iam::123456789012:role/nymeria-azure-vm-role\"\n  },\n  \"azure_vm_aws_secret_access_key\": {\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  }\n}\n</code></pre> </li> <li> <p>Browse to your GitHub repository's Settings.</p> <p></p> </li> <li> <p>In the left navigation, press the Secrets and variables &gt; Actions menu item.</p> <p></p> </li> <li> <p>Press the New repository secret button.</p> </li> <li> <p>Enter the following values for the new secret:</p> <ul> <li> <p>Name: <code>AWS_BOOTSTRAP</code></p> </li> <li> <p>Secret: Paste the JSON Terraform output</p> </li> </ul> </li> <li> <p>Press the Add Secret button.</p> </li> </ol>"},{"location":"getting_started/#google-cloud-project","title":"Google Cloud Project","text":""},{"location":"getting_started/#google-cloud-bootstrap","title":"Google Cloud Bootstrap","text":"<p>Complete the following steps to create the resources required for the Azure virtual machine to authenticate your Google cloud project.</p> <ol> <li> <p>Sign into the Google Cloud Web Console.</p> </li> <li> <p>Select your project in the dropdown list (see #1 in the screenshot below).</p> </li> <li> <p>Note the value of the Project ID as you will need it later to bootstrap your Google Cloud project (see #2 in the screenshot below).</p> </li> <li> <p>Press the Cloud Shell icon next to the search box (see #3 in the screenshot below).</p> <p></p> </li> <li> <p>Run the following commands to clone your <code>nymeria</code> repository into the Google cloud drive.</p> <pre><code>git clone [ENTER_YOUR_CLONE_URL]\n</code></pre> </li> <li> <p>Change the directory to the <code>~/clouddrive/nymeria/src/03_gcp_init</code> directory.</p> <pre><code>cd ~/nymeria/src/virtual_machines/03_gcp_init/\n</code></pre> </li> <li> <p>Apply the Terraform configuration to bootstrap your Google Cloud project with both long-lived credentials and the workload identity resources.</p> <p>Note</p> <p>The Cloud Shell session will prompt you to grant Terraform permission to authenticate to the project. You will need to press the Authorize button to continue.</p> <pre><code>export TF_VAR_project_id=[ENTER_YOUR_GOOGLE_PROJECT_ID]\nexport TF_VAR_azure_tenant_id=[AZURE_TENANT_ID]\nexport TF_VAR_azure_virtual_machine_managed_identity_principal_id=[AZURE_VIRTUAL_MACHINE_USER_IDENTITY_PRINCIPAL_ID]\n\nterraform init\nterraform plan\nterraform apply -auto-approve\n</code></pre> </li> <li> <p>Terraform should confirm the successful creation of the workload identity resources.</p> <p>Terminal Output</p> <pre><code>Apply complete! Resources: 14 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nazure_vm_google_service_account_key = &lt;sensitive&gt;\ngcp_project_id = \"[YOUR_GOOGLE_PROJECT_ID]\"\ngcs_bucket = \"nymeria-cross-cloud-abc123\"\nworkload_identity_client_configuration = ...\n</code></pre> </li> </ol>"},{"location":"getting_started/#google-cloud-github-secret","title":"Google Cloud GitHub Secret","text":"<ol> <li> <p>From the Google CloudShell terminal, run the following command to display the Terraform output. Copy the entire output value onto the clipboard for use in the next step.</p> <pre><code>terraform output --json\n</code></pre> <p>Terminal Output</p> <pre><code>{\n  \"azure_vm_google_service_account_key\": {\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"__redacted__\"\n  },\n  \"gcs_bucket\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"nymeria-cross-cloud-n26pm4d6\"\n  },\n  \"workload_identity_client_configuration\": {\n    \"sensitive\": false,\n    \"type\": \"string\",\n    \"value\": \"...\"\n  }\n}\n</code></pre> </li> <li> <p>Browse to your GitHub repository's Settings.</p> <p></p> </li> <li> <p>In the left navigation, press the Secrets and variables &gt; Actions menu item.</p> <p></p> </li> <li> <p>Press the New repository secret button.</p> </li> <li> <p>Enter the following values for the new secret:</p> <ul> <li> <p>Name: <code>GCP_BOOTSTRAP</code></p> </li> <li> <p>Secret: Paste the JSON Terraform output</p> </li> </ul> </li> <li> <p>Press the Add Secret button.</p> </li> </ol>"},{"location":"getting_started/#nymeria-github-deployment","title":"Nymeria GitHub Deployment","text":"<p>The final setup step is deploying the Nymeria virtual machine to your Azure subscription. This virtual machine will be used to authenticate to your AWS and Google Cloud accounts.</p> <ol> <li> <p>In your GitHub repository, navigate to the Actions tab. Then, click on the I understand my workflows, go ahead and enable them. button.</p> <p></p> </li> <li> <p>Click on the Federated Identity workflow. On the right, press the Run workflow dropdown list and then press the Run workflow button. This will start the workflow on the <code>main</code> branch.</p> <p></p> </li> <li> <p>The Federated Identity workflow should complete the a green success status. Feel free to select the run to view the jobs and output logs.</p> <p></p> </li> </ol>"},{"location":"getting_started/#next-steps","title":"Next Steps","text":"<p>With your Azure, AWS, and Google Cloud accounts bootstrapped, you are ready to start reviewing the Long-lived Credentials.</p>"},{"location":"long_lived_credentials/","title":"Long Lived Credentials","text":"<p>Explore Nymeria's long lived credentials for each cloud provider: Azure, AWS, and Google Cloud. Use each long lived credential to access resources in each cloud provider.</p>"},{"location":"long_lived_credentials/#github-action-credentials","title":"GitHub Action Credentials","text":"<p>From the GitHub Action called Long Lived Credentials, find the Azure tenant id, client id, and client secret values in the log output.</p> <p>Stolen Credentials</p> <p>Running the <code>long-lived-credentials</code> action will purposely expose an Azure client id and client secret in the GitHub Actions logs. The service principal  permissions only have the Reader role on the <code>nymeria-workshop</code> resource group, which currently has no data to exfiltrate. However, these credentials are real and should be immediately deleted at the end of this to prevent exposure. You can skip this section if you are not comfortable with this risk.</p> <ol> <li> <p>In your GitHub repository, navigate to the Actions tab. Then, click on the I understand my workflows, go ahead and enable them. button.</p> <p></p> </li> <li> <p>Click on the Long Lived Credentials workflow. Then, click on the Run workflow button to start the workflow on the <code>main</code> branch.</p> <p></p> </li> <li> <p>Select the completed run of the Long Lived Credentials action to view the jobs.</p> <p></p> </li> <li> <p>Select the Apply Terraform job to view the steps.</p> <p></p> </li> <li> <p>Expand the Azure Login step to find the Azure tenant id, client id, and client secret values in the log output.</p> <p>Console Output</p> <pre><code>Run azure/login@v1.4.6\nwith:\n  creds: ***\"clientId\":\"[your-client-id]\",\"clientSecret\":\"[your-client-secret]\",\"subscriptionId\":\"[your-subscription-id]\",\"tenantId\":\"[your-tenant-id]\"***\n  enable-AzPSSession: false\n  environment: azurecloud\n  allow-no-subscriptions: false\n  audience: api://AzureADTokenExchange\n</code></pre> </li> <li> <p>These long-lived credentials are being used to authenticate to the Azure subscription. Observe the GitHub Action also shows a Note suggesting that we use a a federated credential to use OIDC based authentication.</p> <p>Console Output</p> <pre><code>Note: Azure/login action also supports OIDC login mechanism. Refer https://github.com/azure/login#configure-a-service-principal-with-a-federated-credential-to-use-oidc-based-authentication for more details.\nLogin successful.\n</code></pre> </li> </ol>"},{"location":"long_lived_credentials/#azure-service-principal-secret","title":"Azure Service Principal Secret","text":"<p>Use the long-lived stolen client id and secret values to authenticate to the Azure tenant.</p> <ol> <li> <p>Browse to the Azure Portal open Cloud Shell again.</p> <p></p> </li> <li> <p>Start by running the <code>az ad signed-in-user show</code> command. Observe you are signed into the Terminal under your personal account.</p> <pre><code>az ad signed-in-user show\n</code></pre> <p>Terminal Output</p> <pre><code>{\n  \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#users/$entity\",\n  \"businessPhones\": [],\n  \"displayName\": \"Last Name, First Name,\n  \"givenName\": \"First Name\",\n  \"id\": \"2e164a5a-1ebd-4f3e-ab84-18165db3e826\",\n  \"jobTitle\": \"Hacker\",\n  \"mail\": \"user@pumasecurity.io\",\n  \"mobilePhone\": null,\n  \"officeLocation\": null,\n  \"preferredLanguage\": null,\n  \"surname\": \"Last Name\",\n  \"userPrincipalName\": \"user@pumasecurity.io\"\n}\n</code></pre> </li> <li> <p>Set the following environment variables to the stolen service principal credentials.</p> <pre><code>ARM_TENANT_ID=[STOLEN_TENANT_ID]\nARM_CLIENT_ID=[STOLEN_CLIENT_ID]\nARM_CLIENT_SECRET=[STOLEN_CLIENT_SECRET]\nARM_SUBSCRIPTION_ID=[STOLEN_SUBSCRIPTION_ID]\n</code></pre> </li> <li> <p>Use the stolen service principal credentials to authenticate to the Azure tenant and set the subscription.</p> <pre><code>az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID\naz account set --subscription $ARM_SUBSCRIPTION_ID\n</code></pre> </li> <li> <p>The following command will list the resource groups that the service principal has access to: <code>nymeria-workshop</code>.</p> <pre><code>az group list -o table\n</code></pre> <p>Terminal Output</p> <pre><code>Name              Location    Status\n----------------  ----------  ---------\nnymeria-workshop  eastus      Succeeded\n</code></pre> </li> <li> <p>The following command will list the storage accounts in the <code>nymeria-workshop</code> resource group. The output will confirm you are able to view the storage account containing the Nymeria Terraform state data.</p> <pre><code>az storage account list -g nymeria-workshop -o table --query \"[].{resourceGroup:resourceGroup, name:name}\"\n</code></pre> <p>Terminal Output</p> <pre><code>ResourceGroup     Name\n----------------  -----------------\nnymeria-workshop  terraform9s6ogn1e\n</code></pre> </li> <li> <p>Now that we have proven the stolen credentials work, restart the Azure Cloud Shell to re-authenticate under your personal account.</p> <p></p> </li> <li> <p>Run the following command to delete the compromised service principal from your Azure subscription.</p> <pre><code>LONG_LIVED_APP_ID=$(az ad app list | jq -r '.[] | select(.displayName==\"github-creds-ad-app\").id')\naz ad app delete --id $LONG_LIVED_APP_ID\n</code></pre> </li> <li> <p>Go back to the GitHub repository and delete the run that contained the stolen credentials.</p> <p></p> </li> </ol> <p>Credential Containment</p> <p>Congratulations, you have successfully contained the stolen Azure credentials. Imagine doing this at scale across an enterprise each time a credential is accidentally leaked. Workload identity federation is powerful way to avoid the need for long lived credentials.</p>"},{"location":"long_lived_credentials/#nymeria-virtual-machine","title":"Nymeria Virtual Machine","text":"<p>Start hunting for long-lived AWS and Google cloud credentials on the Nymeria virtual machine. To do this, you will first need to connect to the Nymeria virtual machine over SSH. The private SSH key is stored in a Terraform output parameter called <code>ssh_private_key</code> from the <code>04_gh_action</code> deployment. Using the Azure Cloud Shell, store this output in the <code>~/.ssh/nymeria.pem</code> file.</p> <ol> <li> <p>Run the following commands in the Azure Cloud Shell to authenticate to the Terraform state storage account.</p> <pre><code>cd ~/clouddrive/nymeria/src/virtual_machines/01_azure_init/\nARM_RESOURCE_GROUP_NAME=$(terraform output --json | jq -r '.resource_group_name.value')\nARM_STORAGE_ACCOUNT_NAME=$(terraform output --json | jq -r '.terraform_state_storage_account_name.value')\ncd ~/clouddrive/nymeria/src/virtual_machines/04_gh_action/\nterraform init --backend-config=\"storage_account_name=$ARM_STORAGE_ACCOUNT_NAME\" --backend-config=\"resource_group_name=$ARM_RESOURCE_GROUP_NAME\"\n</code></pre> </li> <li> <p>Read the <code>ssh_private_key</code> output parameter and store the private key in the <code>~/clouddrive/.ssh/nymeria.pem</code> file.</p> <pre><code>mkdir -p ~/.ssh\nterraform output --json | jq -r '.ssh_private_key.value' &gt; ~/.ssh/nymeria.pem\nchmod 400 ~/.ssh/nymeria.pem\n</code></pre> </li> <li> <p>Use the <code>ssh_private_key</code> output parameter to connect to the Nymeria virtual machine over SSH.</p> <pre><code>NYMERIA_FQDN=$(terraform output --json | jq -r '.azure_virtual_machine_fqdn.value')\nssh -i ~/.ssh/nymeria.pem ubuntu@$NYMERIA_FQDN\n</code></pre> <p>Terminal Output</p> <p>If you have successfully connected to the Nymeria virtual machine. The prompt should look like the following:</p> <pre><code>Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 6.2.0-1012-azure x86_64)\n...\nubuntu@nymeria:~$\n</code></pre> </li> </ol>"},{"location":"long_lived_credentials/#aws-access-key","title":"AWS Access Key","text":"<p>Inspect the <code>~/.aws/</code> directory for configuration files containing long-lived AWS credentials.</p> <ol> <li> <p>List the files in the <code>~/.aws/</code> directory. Do you see a file that might contain long-lived credentials?</p> <pre><code>ls -la ~/.aws/\n</code></pre> <p>Terminal Output</p> <pre><code>total 20\ndrwxr-xr-x 2 ubuntu ubuntu 4096 Sep 19 22:38 .\ndrwxr-x--- 6 ubuntu ubuntu 4096 Sep 20 16:49 ..\n-rw-r--r-- 1 root   root     67 Sep 19 22:38 config\n-rw-r--r-- 1 root   root    121 Sep 19 22:38 credentials\n-rw-r--r-- 1 root   root    174 Sep 19 22:38 get-resources.sh\n</code></pre> </li> <li> <p>Use the <code>cat</code> command to view the long-lived AWS credentials.</p> <pre><code>cat ~/.aws/credentials\n</code></pre> <p>Terminal Output</p> <pre><code>[cross-cloud]\naws_access_key_id = [STOLEN_AWS_ACCESS_KEY_ID]\naws_secret_access_key = [STOLEN_AWS_SECRET_ACCESS_KEY]\n</code></pre> </li> <li> <p>Set the <code>AWS_PROFILE</code> environment variable to <code>cross-cloud</code> and use the <code>aws sts get-caller-identity</code> command to test the credentials validity.</p> <pre><code>export AWS_PROFILE=cross-cloud\naws sts get-caller-identity\n</code></pre> <p>Terminal Output</p> <pre><code>{\n    \"UserId\": \"AIDAEXAMPLEID\",\n    \"Account\": \"123456789012\",\n    \"Arn\": \"arn:aws:iam::123456789012:user/nymeria-azure-vm\"\n}\n</code></pre> </li> <li> <p>Review the environment variables pre-populated into the <code>~/.aws/get-resources.sh</code> script. The values include the unique AWS S3 bucket with a Nymeria image.</p> <pre><code>cat ~/.aws/get-resources.sh\n</code></pre> <p>Terminal Output</p> <pre><code>export AWS_S3_BUCKET_ID=nymeria-cross-cloud-abc123\nexport AWS_CROSS_CLOUD_ROLE_ARN=arn:aws:iam::123456789012:role/nymeria-azure-vm-role\nexport AWS_DEFAULT_REGION=us-east-2\n</code></pre> </li> <li> <p>Source the environment variables in the <code>~/.aws/get-resources.sh</code> script and verify the bucket name is populated in the <code>AWS_S3_BUCKET_ID</code> environment variable.</p> <pre><code>source ~/.aws/get-resources.sh \necho $AWS_S3_BUCKET_ID\n</code></pre> <p>Terminal Output</p> <pre><code>nymeria-cross-cloud-abc123\n</code></pre> </li> <li> <p>Run the <code>aws s3 cp</code> command to download the Nymeria image from the S3 bucket using the stolen long-lived credentials.</p> <pre><code>aws s3 cp s3://$AWS_S3_BUCKET_ID/aws-workload-identity.png ~/aws-long-lived-credentials.png\nls -la ~/aws-long-lived-credentials.png\n</code></pre> <p>Terminal Output</p> <pre><code>download: s3://nymeria-cross-cloud-iulqhgnx/aws-workload-identity.png to ./aws-long-lived-credentials.png\n-rw-rw-r-- 1 ubuntu ubuntu 156686 Sep 19 00:25 /home/ubuntu/aws-long-lived-credentials.png\n</code></pre> </li> </ol>"},{"location":"long_lived_credentials/#google-cloud-service-account-key","title":"Google Cloud Service Account Key","text":"<p>Inspect the <code>~/.config/gcloud/</code> directory for configuration files containing long-lived Google Cloud credentials.</p> <ol> <li> <p>List the files in the <code>~/.config/gcloud/</code> directory. Do you see a file that might contain long-lived credentials?</p> <pre><code>ls -la ~/.config/gcloud/\n</code></pre> <p>Terminal Output</p> <pre><code>total 20\ndrwxr-xr-x 2 ubuntu ubuntu 4096 Sep 19 22:38 .\ndrwxr-xr-x 3 root   root   4096 Sep 19 22:38 ..\n-rw-r--r-- 1 root   root    799 Sep 19 22:38 cross-cloud-client-config.json\n-rw-r--r-- 1 root   root   2387 Sep 19 22:38 cross-cloud-key.json\n-rw-r--r-- 1 root   root     89 Sep 19 22:38 get-resources.sh\n</code></pre> </li> <li> <p>Use the <code>cat</code> command to view the long-lived GCP service account key.</p> <pre><code>cat ~/.config/gcloud/cross-cloud-key.json\n</code></pre> <p>Terminal Output</p> <pre><code>{\n    \"type\": \"service_account\",\n    \"project_id\": \"[YOUR_GOOGLE_PROJECT_ID]\",\n    \"private_key_id\": \"662b8b4b471ac0b823d5b0a8206a185f6203cf55\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\n    ...[snipped for brevity]\n}\n</code></pre> </li> <li> <p>Review the environment variables pre-populated into the <code>~/.config/gcloud/get-resources.sh</code> script. The values include the unique GCS bucket with a Nymeria image.</p> <pre><code>cat ~/.config/gcloud/get-resources.sh\n</code></pre> <p>Terminal Output</p> <pre><code>export GCS_BUCKET_ID=nymeria-cross-cloud-abc123\nexport GCP_PROJECT_ID=[YOUR_GCP_PROJECT_ID]\n</code></pre> </li> <li> <p>Source the environment variables in the <code>~/.config/gcloud/get-resources.sh</code> script and verify the bucket name is populated in the <code>AWS_S3_BUCKET_ID</code> environment variable.</p> <pre><code>source ~/.config/gcloud/get-resources.sh\necho $GCS_BUCKET_ID\n</code></pre> <p>Terminal Output</p> <pre><code>nymeria-cross-cloud-abc123\n</code></pre> </li> <li> <p>Run the <code>gcloud auth activate-service-account</code> command to configure the <code>gcloud</code> CLI to use the stolen long-lived credentials.</p> <pre><code>gcloud auth activate-service-account --key-file=/home/ubuntu/.config/gcloud/cross-cloud-key.json\n</code></pre> <p>Terminal Output</p> <pre><code>Activated service account credentials for: [nymeria-cross-cloud-sa@[YOUR_GOOGLE_PROJECT_ID].iam.gserviceaccount.com]\n</code></pre> </li> <li> <p>Run the <code>gsutil</code> command to download the Nymeria image from the GCS bucket using the stolen long-lived credentials.</p> <pre><code>gsutil cp gs://$GCS_BUCKET_ID/gcp-workload-identity.png ~/gcp-long-lived-credential.png\nls -la ~/gcp-long-lived-credential.png\n</code></pre> <p>Terminal Output</p> <pre><code>Copying gs://nymeria-cross-cloud-e9zwi7h7/gcp-workload-identity.png...\n/ [1 files][155.7 KiB/155.7 KiB]\n-rw-rw-r-- 1 ubuntu ubuntu 159450 Sep 20 18:02 /home/ubuntu/gcp-long-lived-credential.png\n</code></pre> </li> </ol>"},{"location":"long_lived_credentials/#next-steps","title":"Next Steps","text":"<p>Long-Lived Credential Exploitation</p> <p>Congratulations, you have successfully stolen and used long-lived credentials to gain access to Azure, AWS, and GCP resources. These long-lived credentials will be destroyed using the Nymeria Teardown steps at the end of the workshop.</p> <p>Next, move on to the Azure Federation section to learn how to use Azure Workload Identity Federation to avoid the need for long-lived client secrets.</p>"},{"location":"prerequisites/","title":"Prerequisites","text":""},{"location":"prerequisites/#background-knowledge","title":"Background Knowledge","text":"<p>The workshop is written such that those with entry level Information Technology and Information Security experience can complete the steps. Just be careful to read the instructions closely and take your time. If an instruction is unclear or you get stuck, please open a pull request in the Nymeria GitHub repository to improve the documentation.</p> <p>Familiarity with the following services and tools can help you better understand the concepts covered during the workshop:</p> <ul> <li> Identity and Access Management (IAM) in the Azure, AWS, and Google clouds</li> <li> OpenID Connect</li> <li> Linux command-line interface (CLI)</li> <li> jq</li> <li> GitHub and GitHub Actions</li> <li> Terraform</li> </ul>"},{"location":"prerequisites/#cloud-accounts","title":"Cloud Accounts","text":"<p>The Nymeria workshop deploys the cross-cloud identity scenario using GitHub, Microsoft Azure, Amazon Web Services, and Google Cloud. Costs for running the workshop's resource are expected to be less than $2.50 USD per day. You are responsible for any costs incurred during the workshop.</p> <p>Cloud Providers Required</p> <p>You must register an account with each of the following cloud providers to successfully complete the workshop.</p>"},{"location":"prerequisites/#github-personal-account","title":"GitHub Personal Account","text":"<ol> <li> <p>Use the following link to register for a free GitHub Personal Account:</p> <p>https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account</p> </li> </ol>"},{"location":"prerequisites/#azure-subscription","title":"Azure Subscription","text":"<ol> <li> <p>Use the following link to register for an Azure account and create a new subscription:</p> <p>https://azure.microsoft.com/en-us/free/</p> </li> <li> <p>In the Azure Portal and press the Cloud Shell icon next to the search box.</p> <p></p> </li> <li> <p>Run the following commands to enable the Web and Compute APIs in your subscription.</p> <pre><code>az provider register --namespace Microsoft.Web\naz provider register --namespace Microsoft.Compute\naz provider register --namespace Microsoft.CloudShell\n</code></pre> </li> <li> <p>The workshop requires you to be able to create an Azure virtual machine. After creating the new subscription, we highly recommend manually creating a new <code>Standard_A2_v2</code> virtual machine in the <code>eastus</code> location using the Azure Portal to ensure that your account is fully activated. If you are unable to create a new virtual machine, please contact Microsoft Support to increase your quota. Follow these instructions to create a new virtual machine:</p> <p>https://learn.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal?tabs=ubuntu</p> </li> <li> <p>After creating the new virtual machine, you can delete the new resource group from the Azure Portal.</p> </li> </ol>"},{"location":"prerequisites/#aws-account","title":"AWS Account","text":"<ol> <li> <p>Use the following link to register for a new personal free tier AWS account:</p> <p>https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-creating.html</p> </li> <li> <p>The workshop requires you to create an AWS S3 bucket. To ensure you account is fully activated, we highly recommend manually creating a new S3 bucket in the <code>us-east-2 (Ohio)</code> region using the AWS Console. If you are unable to create a new S3 bucket, please contact AWS Support to increase your quota. Follow these instructions to create a new S3 bucket:</p> <p>https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html</p> </li> <li> <p>After creating the S3 bucket, you can delete the bucket from the AWS Console.</p> </li> </ol>"},{"location":"prerequisites/#google-cloud-account","title":"Google Cloud Account","text":"<ol> <li> <p>Use the following link to register for a new personal Google Cloud project:</p> <p>https://cloud.google.com/free</p> </li> <li> <p>The workshop requires you to create a Google Cloud Storage (GCS) bucket. To ensure you account is fully activated, we highly recommend manually creating a new GCS bucket in the Google Cloud Console. If you are unable to create a new GCS bucket, please contact Google Cloud Support to increase your quota. Follow these instructions to create a new GCS bucket:</p> <p>https://cloud.google.com/storage/docs/creating-buckets</p> </li> <li> <p>After creating the GCS bucket, you can delete the bucket from the Google Cloud Console.</p> </li> </ol>"},{"location":"prerequisites/#next-steps","title":"Next Steps","text":"<p>With your cloud accounts, move on to the Getting Started section.</p>"},{"location":"teardown/","title":"Nymeria Workshop Teardown","text":"<p>Complete the following steps to destroy the resources created during the Nymeria workshop.</p>"},{"location":"teardown/#azure-subscription","title":"Azure Subscription","text":"<p>Complete the following steps to destroy the resources created in your Azure subscription.</p> <ol> <li> <p>Sign into the Azure Portal and press the Cloud Shell icon next to the search box.</p> <p></p> </li> <li> <p>Run the following commands to destroy the resources created by the Federated Identity GitHub action.</p> <pre><code>cd ~/clouddrive/nymeria/src/virtual_machines/01_azure_init/\nexport TF_VAR_resource_group_name=$(terraform output --json | jq -r '.resource_group_name.value')\ncd ~/clouddrive/nymeria/src/virtual_machines/04_gh_action/\nexport TF_VAR_aws_default_region=\"us-east-2\"\nexport TF_VAR_aws_access_key_id=\"AKIAEXAMPLE\"\nexport TF_VAR_aws_secret_access_key=\"EXAMPLESECRETACCESSKEY\"\nexport TF_VAR_aws_cross_cloud_role_arn=\"arn:aws:iam::123456789012:role/EXAMPLE\"\nexport TF_VAR_aws_s3_bucket_id=\"example-bucket\"\nexport TF_VAR_azure_virtual_machine_managed_identity_id=\"/subscriptions/EXAMPLE-SUBSCRIPTION-ID/resourceGroups/example-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/example-managed-identity\"\nexport TF_VAR_google_cloud_project_id=\"nymeria-123456\"\nexport TF_VAR_google_cloud_service_account_key=\"ZXhhbXBsZQo=\"\nexport TF_VAR_google_cloud_workload_identity_client_configuration=\"ZXhhbXBsZQo=\"\nexport TF_VAR_gcs_bucket_id=\"example-bucket\"\nterraform destroy -auto-approve\n</code></pre> <p>Terminal Output</p> <pre><code>Destroy complete! Resources: 12 destroyed.\n</code></pre> </li> <li> <p>Run the following commands to destroy the resources created by the configuration in the <code>~/clouddrive/nymeria/src/01_azure_init</code> directory.</p> <pre><code>cd ~/clouddrive/nymeria/src/virtual_machines/01_azure_init/\nexport TF_VAR_github_organization=pumasecurity\nexport TF_VAR_github_repository=nymeria\nterraform destroy -auto-approve\n</code></pre> <p>Terminal Output</p> <pre><code>Destroy complete! Resources: 10 destroyed.\n</code></pre> </li> </ol>"},{"location":"teardown/#aws-account","title":"AWS Account","text":"<p>Complete the following steps to destroy the resources created in your AWS account.</p> <ol> <li> <p>Sign into the AWS Web Console.</p> </li> <li> <p>Set the region (top right-hand corner) to <code>us-east-2 (Ohio)</code>.</p> </li> <li> <p>Press the Cloud Shell icon next to the search box.</p> <p></p> </li> <li> <p>Run the following commands to destroy the resources created by the configuration in the <code>~/clouddrive/nymeria/src/02_aws_init</code> directory.</p> <pre><code>cd ~/nymeria/src/virtual_machines/02_aws_init/\nexport TF_VAR_azure_tenant_id=\"EXAMPLE-TENANT-ID\"\nexport TF_VAR_azure_virtual_machine_managed_identity_principal_id=\"EXAMPLE-PRINCIPAL-ID\"\nterraform destroy -auto-approve\n</code></pre> <p>Terminal Output</p> <pre><code>Destroy complete! Resources: 10 destroyed.\n</code></pre> </li> </ol>"},{"location":"teardown/#google-cloud-project","title":"Google Cloud Project","text":"<p>Complete the following steps to destroy the resources created in your Google Cloud project.</p> <ol> <li> <p>Sign into the Google Cloud Web Console.</p> </li> <li> <p>Select your project in the dropdown list (see #1 in the screenshot below).</p> </li> <li> <p>Press the Cloud Shell icon next to the search box (see #3 in the screenshot below).</p> <p></p> </li> <li> <p>Run the following commands to destroy the resources created by the configuration in the <code>~/nymeria/src/virtual_machines/03_gcp_init/</code> directory. You will need to Authorize the Cloud Shell to access your Google Cloud project.</p> <pre><code>cd ~/nymeria/src/virtual_machines/03_gcp_init/\nexport TF_VAR_project_id=$(terraform output --json | jq -r '.gcp_project_id.value')\nexport TF_VAR_azure_tenant_id=\"EXAMPLE-TENANT-ID\"\nexport TF_VAR_azure_virtual_machine_managed_identity_principal_id=\"EXAMPLE-PRINCIPAL-ID\"\nterraform destroy -auto-approve\n</code></pre> <p>Terminal Output</p> <pre><code>Destroy complete! Resources: 14 destroyed.\n</code></pre> </li> </ol>"},{"location":"teardown/#github-repository","title":"GitHub Repository","text":"<ol> <li> <p>Browse to your Nymeria GitHub repository's Settings.</p> <p></p> </li> <li> <p>Delete the GitHub Nymeria GitHub repository</p> <p></p> </li> </ol>"}]}